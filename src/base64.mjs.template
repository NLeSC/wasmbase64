const decodeWasmCode = new Uint8Array([${decode_uint8}]);
let decodeWasmModule = null;

const encodeWasmCodeBase64 = "${encode_base64}";
let encodeWasmCode = null;
let encodeWasmModule = null;

const PAGE_SIZE = 1024 * 64;

export class Base64Decoder {
    constructor() {
      this.instance = null;
    };

    async init () {
        if (!decodeWasmModule) {
            decodeWasmModule = await WebAssembly.compile(decodeWasmCode);
        }
        if (!this.instance) {
            this.instance = await WebAssembly.instantiate(decodeWasmModule, { });
        }
    }

    growMemory(requiredMemory) {
        const requiredPages = Math.ceil(requiredMemory / PAGE_SIZE);
        const currentPages = this.instance.exports.memory.buffer.byteLength / PAGE_SIZE;
        if (requiredPages > currentPages) {
            this.instance.exports.memory.grow(requiredPages - currentPages);
        }
    }

    decode (inputBuffer) {
        if (!this.instance) { throw new Error("Please call .init() first."); }
        const heapBase = this.instance.exports.__heap_base.value;
        this.growMemory(heapBase + inputBuffer.byteLength);
        let membuf = new Uint8Array(this.instance.exports.memory.buffer, heapBase);
        membuf.set(inputBuffer);
        const decodedLength = this.instance.exports.get_output_size(heapBase, inputBuffer.byteLength);
        this.growMemory(heapBase + inputBuffer.byteLength + decodedLength);
        membuf = new Uint8Array(this.instance.exports.memory.buffer, heapBase);
        this.instance.exports.unbase64(heapBase, inputBuffer.byteLength);
        return membuf.slice(inputBuffer.byteLength, inputBuffer.byteLength + decodedLength);
    }

    decodeString (inputString) {
        const textEncoder = new TextEncoder('utf-8');
        const textDecoder = new TextDecoder('utf-8');
        return this.decode(
            textEncoder.encode(inputString)
        );
    }
}

export class Base64Encoder {
    constructor() {
      this.instance = null;
    };

    async init () {
        if (!encodeWasmCode) {
            const decoder = new Base64Decoder();
            await decoder.init();
            encodeWasmCode = decoder.decodeString(encodeWasmCodeBase64);
        }
        if (!encodeWasmModule) {
            encodeWasmModule = await WebAssembly.compile(encodeWasmCode);
        }
        if (!this.instance) {
            this.instance = await WebAssembly.instantiate(encodeWasmModule, { });
        }
    }

    growMemory(requiredMemory) {
        const requiredPages = Math.ceil(requiredMemory / PAGE_SIZE);
        const currentPages = this.instance.exports.memory.buffer.byteLength / PAGE_SIZE;
        if (requiredPages > currentPages) {
            console.log('growing to ', requiredPages - currentPages);
            this.instance.exports.memory.grow(requiredPages - currentPages);
        }
    }

    encode (inputBuffer) {
        if (!this.instance) { throw new Error("Please call .init() first."); }
        const heapBase = this.instance.exports.__heap_base.value;
        this.growMemory(heapBase + inputBuffer.byteLength);
        let membuf = new Uint8Array(this.instance.exports.memory.buffer, heapBase);
        membuf.set(inputBuffer);
        const encodedLength = this.instance.exports.get_output_size(inputBuffer.byteLength);
        this.growMemory(heapBase + inputBuffer.byteLength + encodedLength);
        membuf = new Uint8Array(this.instance.exports.memory.buffer, heapBase);
        this.instance.exports.base64(heapBase, inputBuffer.byteLength);
        return membuf.slice(inputBuffer.byteLength, inputBuffer.byteLength + encodedLength);
    }

    encodeString (inputString) {
        const textEncoder = new TextEncoder('utf-8');
        return this.encode(
            textEncoder.encode(inputString)
        );
    }
}
